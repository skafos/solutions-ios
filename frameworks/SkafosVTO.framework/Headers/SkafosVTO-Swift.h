#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import SceneKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SkafosVTO",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@class UIImageView;
@class NSCoder;

/// Cell to display the product’s preview image in the collection view.
/// When providing your own custom interface, you must subclass this cell type
/// and wire it appropriately in your storyboard.
SWIFT_CLASS("_TtC9SkafosVTO23VirtualTryOnPreviewCell")
@interface VirtualTryOnPreviewCell : UICollectionViewCell
/// Displays the preview images of the product.
/// When providing your own custom interface, please connect this outlet to a <code>UIImageView</code>.
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class ARSCNView;
@class UICollectionView;
@class NSBundle;

/// Displays the Skafos Virtual Try On solution!
/// To create your own custom interface for Virtual Try On, please do the following:
/// <ol>
///   <li>
///     Make your controller a subclass of this controller, <code>VirtualTryOnViewController</code>.
///   </li>
///   <li>
///     Make your preview cell a subclass of the <code>VirtualTryOnPreviewCell</code> type.
///   </li>
///   <li>
///     Create a storyboard whose initial view controller is that controller.
///   </li>
/// </ol>
/// Within the storyboard, you will need to connect to this solution’s code in a few ways, described below.
/// <ol>
///   <li>
///     Connect your UI elements to the outlets provided:
///   </li>
/// </ol>
/// <ul>
///   <li>
///     The controller’s <code>sceneView</code> outlet displays the <code>ARKit</code> scene
///   </li>
///   <li>
///     The controller’s <code>collectionView</code> outlet displays the preview images of the products to try on
///   </li>
///   <li>
///     the cell’s <code>imageView</code> outlet displays the preview image
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Make sure the preview cell’s reuse identifier is <code>"Preview"</code>
///   </li>
///   <li>
///     Optionally connect to actions to access provided behavior:
///   </li>
/// </ol>
/// <ul>
///   <li>
///     <code>closeViewController(_:)</code> to close the experience
///   </li>
///   <li>
///     <code>buy(_:)</code> to initiate the purchasing experience for the currently selected product
///   </li>
///   <li>
///     <code>share(_:)</code> to initiate the sharing experience for the currently selected product
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9SkafosVTO26VirtualTryOnViewController")
@interface VirtualTryOnViewController : UIViewController
/// Displays the <code>ARKit</code> scene.
/// When providing your own custom interface, please connect this outlet to an <code>ARSCNView</code>.
@property (nonatomic, weak) IBOutlet ARSCNView * _Null_unspecified sceneView;
/// Displays the preview images of the products to try on.
/// When providing your own custom interface, please connect this outlet to a <code>UICollectionView</code>.
@property (nonatomic, weak) IBOutlet UICollectionView * _Null_unspecified collectionView;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// Closes this view controller by calling <code>dismiss</code>.
/// When providing your own custom interface, you may connect events to this action.
- (IBAction)closeViewController:(id _Nonnull)sender;
/// Initiates the purchasing experience for the currently selected product.
/// When providing your own custom interface, you may connect events to this action.
- (IBAction)buy:(id _Nonnull)sender;
/// Initiates the sharing experience for the currently selected product.
/// When providing your own custom interface, you may connect events to this action.
- (IBAction)share:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate type to customize behavior when the user presses the buy or share buttons.
SWIFT_PROTOCOL("_TtP9SkafosVTO34VirtualTryOnViewControllerDelegate_")
@protocol VirtualTryOnViewControllerDelegate
@optional
/// Called when the user presses the buy button. Return <code>true</code> to indicate that the SDK should handle
/// the buy action natively. The implementation of this method is optional and defaults to <code>true</code>.
/// \param viewController The <code>VirtualTryOnViewController</code> on which the button was pressed.
///
/// \param solution The <code>String</code> identifier of the <code>VirtualTryOn</code> solution.
///
/// \param product The <code>String</code> identifier of the product tried on.
///
/// \param buyURL The <code>URL</code> to purchase the product as bundled in the solution assets.
///
///
/// returns:
/// Return <code>true</code> to let the SDK handle the buy action. Return <code>false</code> to handle it externally from this method.
- (BOOL)shouldBuyWithViewController:(VirtualTryOnViewController * _Nonnull)viewController solution:(NSString * _Nonnull)solution product:(NSString * _Nonnull)product buyURL:(NSURL * _Nonnull)buyURL SWIFT_WARN_UNUSED_RESULT;
/// Called when the user presses the share button. Return <code>true</code> to indicate that the SDK should handle
/// the share action natively. The implementation of this method is optional and defaults to <code>true</code>.
/// \param viewController The <code>VirtualTryOnViewController</code> on which the button was pressed.
///
/// \param solution The <code>String</code> identifier of the <code>VirtualTryOn</code> solution.
///
/// \param product The <code>String</code> identifier of the product tried on.
///
/// \param shareURL The <code>URL</code> to purchase the product as bundled in the solution assets.
///
/// \param screenshot A <code>UIImage</code> screenshot of the user trying on the product.
///
///
/// returns:
/// Return <code>true</code> to let the SDK handle the buy action. Return <code>false</code> to handle it externally from this method.
- (BOOL)shouldShareWithViewController:(VirtualTryOnViewController * _Nonnull)viewController solution:(NSString * _Nonnull)solution product:(NSString * _Nonnull)product shareURL:(NSURL * _Nonnull)shareURL screenshot:(UIImage * _Nonnull)screenshot SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#else
// Generated by Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import SceneKit;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SkafosVTO",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif





@class UIImageView;
@class NSCoder;

/// Cell to display the product’s preview image in the collection view.
/// When providing your own custom interface, you must subclass this cell type
/// and wire it appropriately in your storyboard.
SWIFT_CLASS("_TtC9SkafosVTO23VirtualTryOnPreviewCell")
@interface VirtualTryOnPreviewCell : UICollectionViewCell
/// Displays the preview images of the product.
/// When providing your own custom interface, please connect this outlet to a <code>UIImageView</code>.
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified imageView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class ARSCNView;
@class UICollectionView;
@class NSBundle;

/// Displays the Skafos Virtual Try On solution!
/// To create your own custom interface for Virtual Try On, please do the following:
/// <ol>
///   <li>
///     Make your controller a subclass of this controller, <code>VirtualTryOnViewController</code>.
///   </li>
///   <li>
///     Make your preview cell a subclass of the <code>VirtualTryOnPreviewCell</code> type.
///   </li>
///   <li>
///     Create a storyboard whose initial view controller is that controller.
///   </li>
/// </ol>
/// Within the storyboard, you will need to connect to this solution’s code in a few ways, described below.
/// <ol>
///   <li>
///     Connect your UI elements to the outlets provided:
///   </li>
/// </ol>
/// <ul>
///   <li>
///     The controller’s <code>sceneView</code> outlet displays the <code>ARKit</code> scene
///   </li>
///   <li>
///     The controller’s <code>collectionView</code> outlet displays the preview images of the products to try on
///   </li>
///   <li>
///     the cell’s <code>imageView</code> outlet displays the preview image
///   </li>
/// </ul>
/// <ol>
///   <li>
///     Make sure the preview cell’s reuse identifier is <code>"Preview"</code>
///   </li>
///   <li>
///     Optionally connect to actions to access provided behavior:
///   </li>
/// </ol>
/// <ul>
///   <li>
///     <code>closeViewController(_:)</code> to close the experience
///   </li>
///   <li>
///     <code>buy(_:)</code> to initiate the purchasing experience for the currently selected product
///   </li>
///   <li>
///     <code>share(_:)</code> to initiate the sharing experience for the currently selected product
///   </li>
/// </ul>
SWIFT_CLASS("_TtC9SkafosVTO26VirtualTryOnViewController")
@interface VirtualTryOnViewController : UIViewController
/// Displays the <code>ARKit</code> scene.
/// When providing your own custom interface, please connect this outlet to an <code>ARSCNView</code>.
@property (nonatomic, weak) IBOutlet ARSCNView * _Null_unspecified sceneView;
/// Displays the preview images of the products to try on.
/// When providing your own custom interface, please connect this outlet to a <code>UICollectionView</code>.
@property (nonatomic, weak) IBOutlet UICollectionView * _Null_unspecified collectionView;
/// :nodoc:
- (void)viewDidLoad;
/// :nodoc:
- (void)viewDidAppear:(BOOL)animated;
/// :nodoc:
- (void)viewDidDisappear:(BOOL)animated;
/// Closes this view controller by calling <code>dismiss</code>.
/// When providing your own custom interface, you may connect events to this action.
- (IBAction)closeViewController:(id _Nonnull)sender;
/// Initiates the purchasing experience for the currently selected product.
/// When providing your own custom interface, you may connect events to this action.
- (IBAction)buy:(id _Nonnull)sender;
/// Initiates the sharing experience for the currently selected product.
/// When providing your own custom interface, you may connect events to this action.
- (IBAction)share:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate type to customize behavior when the user presses the buy or share buttons.
SWIFT_PROTOCOL("_TtP9SkafosVTO34VirtualTryOnViewControllerDelegate_")
@protocol VirtualTryOnViewControllerDelegate
@optional
/// Called when the user presses the buy button. Return <code>true</code> to indicate that the SDK should handle
/// the buy action natively. The implementation of this method is optional and defaults to <code>true</code>.
/// \param viewController The <code>VirtualTryOnViewController</code> on which the button was pressed.
///
/// \param solution The <code>String</code> identifier of the <code>VirtualTryOn</code> solution.
///
/// \param product The <code>String</code> identifier of the product tried on.
///
/// \param buyURL The <code>URL</code> to purchase the product as bundled in the solution assets.
///
///
/// returns:
/// Return <code>true</code> to let the SDK handle the buy action. Return <code>false</code> to handle it externally from this method.
- (BOOL)shouldBuyWithViewController:(VirtualTryOnViewController * _Nonnull)viewController solution:(NSString * _Nonnull)solution product:(NSString * _Nonnull)product buyURL:(NSURL * _Nonnull)buyURL SWIFT_WARN_UNUSED_RESULT;
/// Called when the user presses the share button. Return <code>true</code> to indicate that the SDK should handle
/// the share action natively. The implementation of this method is optional and defaults to <code>true</code>.
/// \param viewController The <code>VirtualTryOnViewController</code> on which the button was pressed.
///
/// \param solution The <code>String</code> identifier of the <code>VirtualTryOn</code> solution.
///
/// \param product The <code>String</code> identifier of the product tried on.
///
/// \param shareURL The <code>URL</code> to purchase the product as bundled in the solution assets.
///
/// \param screenshot A <code>UIImage</code> screenshot of the user trying on the product.
///
///
/// returns:
/// Return <code>true</code> to let the SDK handle the buy action. Return <code>false</code> to handle it externally from this method.
- (BOOL)shouldShareWithViewController:(VirtualTryOnViewController * _Nonnull)viewController solution:(NSString * _Nonnull)solution product:(NSString * _Nonnull)product shareURL:(NSURL * _Nonnull)shareURL screenshot:(UIImage * _Nonnull)screenshot SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Skafos
import ARKit
import CoreML
import Foundation
import SafariServices
import SceneKit
@_exported import Skafos
import Swift
import UIKit
import Vision
final public class VirtualTryOn {
  final public var identifier: Swift.String {
    get
  }
  final public var version: Swift.Int {
    get
  }
  public static func load(identifier: Swift.String, behavior: Skafos.LoadBehavior = .cachedOrNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Skafos.VirtualTryOn, Skafos.SkafosError>) -> ())
  final public func reload(behavior: Skafos.LoadBehavior = .checkForNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Swift.Void, Skafos.SkafosError>) -> ())
  final public func buildViewController() -> Skafos.VirtualTryOnViewController?
  @objc deinit
}
final public class CustomAsset {
  final public var identifier: Swift.String {
    get
  }
  final public var version: Swift.Int {
    get
  }
  public static func load(identifier: Swift.String, behavior: Skafos.LoadBehavior = .cachedOrNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Skafos.CustomAsset, Skafos.SkafosError>) -> ())
  final public func reload(behavior: Skafos.LoadBehavior = .checkForNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Swift.Void, Skafos.SkafosError>) -> ())
  final public var files: [Swift.String : Foundation.URL] {
    get
  }
  final public var models: [Swift.String : CoreML.MLModel] {
    get
  }
  final public func file(named filename: Swift.String) throws -> Foundation.URL
  final public func model(named filename: Swift.String) throws -> CoreML.MLModel
  @objc deinit
}
public enum ProductRecommenderOptionKey {
  case reportAnalytics
  case includeInput
  case randomize
  case randomFactor
  case filter
  case analyticsTag
  public static func == (a: Skafos.ProductRecommenderOptionKey, b: Skafos.ProductRecommenderOptionKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
final public class ProductRecommender<T> where T : Swift.Decodable, T : Swift.Encodable, T : Swift.Hashable {
  final public var identifier: Swift.String {
    get
  }
  final public var version: Swift.Int {
    get
  }
  public static func load(identifier: Swift.String, behavior: Skafos.LoadBehavior = .cachedOrNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Skafos.ProductRecommender<T>, Skafos.SkafosError>) -> ())
  final public func reload(behavior: Skafos.LoadBehavior = .checkForNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Swift.Void, Skafos.SkafosError>) -> ())
  @discardableResult
  final public func recommend(top n: Swift.Int, from input: [T], options: [Skafos.ProductRecommenderOptionKey : Any] = [:], callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<[T], Skafos.SkafosError>) -> ()) -> Skafos.ProductRecommendation<T>
  @objc deinit
}
public class ProductRecommendation<T> : ObjectiveC.NSObject where T : Swift.Encodable {
  public var result: Swift.Result<[T], Skafos.SkafosError>? {
    get
  }
  public func recordEvent(name: Swift.String, products: [T], startedAt: Foundation.Date = Date(), duration: Foundation.TimeInterval? = 0)
  public func recordEvent<U>(name: Swift.String, products: [T], metadata: U? = nil, startedAt: Foundation.Date = Date(), duration: Foundation.TimeInterval? = 0) where U : Swift.Encodable
  @objc override dynamic public init()
  @objc deinit
}
public struct LifecycleOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let checkForUpdatesOnForeground: Skafos.LifecycleOptions
  public static let handleBackgroundDownloadCompletion: Skafos.LifecycleOptions
  public static let none: Skafos.LifecycleOptions
  public static let all: Skafos.LifecycleOptions
  public typealias Element = Skafos.LifecycleOptions
  public typealias ArrayLiteralElement = Skafos.LifecycleOptions
  public typealias RawValue = Swift.Int
}
public struct UnderlyingError {
  public let code: Swift.Int
  public let wrapped: Swift.Error?
  public var isNotConnectedToInternet: Swift.Bool {
    get
  }
}
public enum SkafosError : Swift.Error {
  case notYetInitialized
  case noSuchFile(filename: Swift.String)
  case invalidImage
  case notSupportedOnThisOSVersion(minimumVersion: Swift.String)
  case notSupportedOnThisDevice(requirement: Swift.String)
  case underlying(Skafos.UnderlyingError)
  public var code: Swift.Int {
    get
  }
}
extension Skafos {
  public static let downloadedNotification: Foundation.Notification.Name
  public static let loadedNotification: Foundation.Notification.Name
  public static let notificationTypeKey: Swift.String
  public static let notificationIdentifierKey: Swift.String
  public static let notificationVersionKey: Swift.String
}
public struct Download : Swift.Codable {
  public enum `Type` : Swift.String, Swift.Codable {
    case asset
    case model
    case solution
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public let type: Skafos.Download.Type
  public let identifier: Swift.String
  public let name: Swift.String
  public let kind: Swift.String?
  public let version: Swift.Int
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BundledDownload {
  public let download: Skafos.Download
  public let url: Foundation.URL
  public init(type: Skafos.Download.Type, identifier: Swift.String, version: Swift.Int, url: Foundation.URL)
}
@objc public protocol VirtualTryOnViewControllerDelegate : AnyObject {
  @objc optional func shouldBuy(viewController: Skafos.VirtualTryOnViewController, solution: Swift.String, product: Swift.String, buyURL: Foundation.URL) -> Swift.Bool
  @objc optional func shouldShare(viewController: Skafos.VirtualTryOnViewController, solution: Swift.String, product: Swift.String, shareURL: Foundation.URL, screenshot: UIKit.UIImage) -> Swift.Bool
}
@objc public class VirtualTryOnViewController : UIKit.UIViewController {
  public var solutionIdentifier: Swift.String! {
    get
    }
  public var delegate: Skafos.VirtualTryOnViewControllerDelegate?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  public func setSelected(product id: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum LoadBehavior {
  case cachedOrNew
  case checkForNew
  case forceDownload
  public static func == (a: Skafos.LoadBehavior, b: Skafos.LoadBehavior) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
final public class VisualSearch<T> where T : Swift.Decodable {
  final public var identifier: Swift.String {
    get
  }
  final public var version: Swift.Int {
    get
  }
  public static func load(identifier: Swift.String, behavior: Skafos.LoadBehavior = .cachedOrNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Skafos.VisualSearch<T>, Skafos.SkafosError>) -> ())
  final public func reload(behavior: Skafos.LoadBehavior = .checkForNew, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<Swift.Void, Skafos.SkafosError>) -> ())
  final public func find(top n: Swift.Int, similarTo image: UIKit.UIImage, callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<[T], Skafos.SkafosError>) -> ())
  @objc deinit
}
final public class Skafos {
  public struct OptionKey : Swift.Hashable, Swift.ExpressibleByStringLiteral {
    public static let lifecycleOptions: Skafos.Skafos.OptionKey
    public static let bundledDownloads: Skafos.Skafos.OptionKey
    public init(stringLiteral: Swift.String)
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: Skafos.Skafos.OptionKey, b: Skafos.Skafos.OptionKey) -> Swift.Bool
    public typealias StringLiteralType = Swift.String
    public typealias ExtendedGraphemeClusterLiteralType = Swift.String
    public typealias UnicodeScalarLiteralType = Swift.String
  }
  final public class func initialize(_ clientKey: Swift.String, options: [Skafos.Skafos.OptionKey : Any] = [:])
  final public class func getAvailableDownloads(callbackQueue queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Result<[Skafos.Download], Skafos.SkafosError>) -> ())
  final public class func checkForUpdates()
  final public class func recordEvent<T>(name: Swift.String, metadata: T? = nil, startedAt: Foundation.Date = Date(), duration: Foundation.TimeInterval? = 0) where T : Swift.Encodable
  final public class func handleEventsForBackgroundURLSession(identifier: Swift.String, completionHandler completion: @escaping () -> Swift.Void)
  @objc deinit
}
extension Skafos.ProductRecommenderOptionKey : Swift.Equatable {}
extension Skafos.ProductRecommenderOptionKey : Swift.Hashable {}
extension Skafos.Download.Type : Swift.Equatable {}
extension Skafos.Download.Type : Swift.Hashable {}
extension Skafos.Download.Type : Swift.RawRepresentable {}
extension Skafos.LoadBehavior : Swift.Hashable {}
